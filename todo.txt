-front
    -connect wallet
        -Korisnik unosi podatke svog pasoša (heširani za privatnost).
            -da kreira testament
            -da proveri testament
        -Korisnik unosi podatke naslednika (ime, wallet adresa, procenat nasledstva, listu stavki (npr. kuća, auto).).
        -Advokat unosi potvrdu o smrti korisnika (aktivira testament).
            -svoje podatke + broj testamenta
        -Naslednici proveravaju da li imaju nasledstvo.
            -prikaz testamenta
        -generisanje dokumenta i hesiranje 

-Rust smart contract koji:
    -Čuva podatke o testamentu (heširano).
    -Čuva adresu advokata koji potvrđuje smrt.
    -Omogućava naslednicima da dokažu svoj identitet pomoću zkVerify. (da bi dobili pristup da vide sta dobijaju)
    -Automatski distribuira sredstva nakon potvrde. (advokata koji je jedini covek koji to moze da uradi)


-struktura testamenta
    #[stylus::contract]
    pub struct Testament {
        owner: Address,
        lawyer: Address,
        is_active: bool,
        heirs: Vec<Heir>,
    }
    #[stylus::storage]
    pub struct Heir {
        address: Address,
        percentage: u64,
        document_hash: String, // IPFS ili Arweave hash testamenta(al cemo ipak hakovati sistem i napraviti json fajlove)
    }


-flow
    -connect wallet
        -korsinik unosi svoje podatke iz pasosa
            -moze da napravi testament ili da procita ako ima neki za njega 
                -citanje testamenta
                    -vadimo iz "Baze podataka-foldera" fajl koji ce iz json u pdf i da se prikaze na frontu
                        -a u samom jasonu ili ti testametnu imamo deo gde je hesh svi podataka iz pasosa i adrese i on jedini ima pristup
                -pravljenja testamenta
                    -on mora unosese podatke naslednika(pasos i adresa) koji se hesira
                    -mora da upise sta nasledjuje svaki naslenik posebno i to se generise u posebne json fajlove koji se upisuju u nasu bazu
                        -procent novca iz svog valeta
                        -podaci sta ostalo dobija
                    -unese podatke advokata koji ce odradi approve da je umro
        -advokat
            -unosi svoje podatke za verfikaciju i hash mrtvog coveka ili glavnog testamenta
            -i on moze da odradi approve da je covek rip i onda aktivira testament
        




-dodatne stvari
    -uslovi za testament kome identite
    -dokaz o imovini, hesiran fajl dokaza imovine nesto 
    -za advokata da unese smrtovnicu (izvod iz knjige mrtvih)
    -educhain za covanje podataka, tako sto ce biti nft u kome su metapodaci sta neko nasledjuje i onda njega posledjujemo 
    -ai za predlog oko raspodele testamenta i support 
    -kada se akrivira testament, dobije se obavestenje na mejl 
    -dodati vise advokata
    -da li moze odmah da vidi testamen ili tek kada se realizuje
    


zk-inheritance/
│── frontend/                     # 📌 Next.js aplikacija
│   ├── components/               # ✅ UI komponente
│   │   ├── WalletConnect.tsx     # 🏦 Metamask / WalletConnect integracija
│   │   ├── CreateTestament.tsx   # 📜 Forma za kreiranje testamenata
│   │   ├── CheckTestament.tsx    # 🔍 Provera nasledstva
│   │   ├── LawyerApproval.tsx    # ⚖️  Forma za advokata
│   │   ├── TestamentView.tsx     # 📄 Prikaz nasledstva u PDF formatu
│   ├── pages/                    # ✅ Next.js rute
│   │   ├── index.tsx             # 🏠 Početna stranica
│   │   ├── create.tsx            # ✍️  Kreiranje testamenata
│   │   ├── check.tsx             # 🔎 Provera nasledstva
│   │   ├── lawyer.tsx            # ⚖️  Stranica za advokata
│   ├── utils/                    # ✅ Pomoćne funkcije
│   │   ├── hash.ts               # 🔐 Heširanje PDF fajlova (SHA-256)
│   │   ├── generatePDF.ts        # 📄 Generisanje PDF fajlova iz JSON-a
│   │   ├── zkProof.ts            # 🔐 Kreiranje ZK dokaza (koristi wasm)
│   │   ├── zkVerify.ts           # ✅ Verifikacija dokaza na smart contractu
│   ├── styles/                   # 🎨 CSS / Tailwind fajlovi
│   ├── public/                   # 📁 Staticki fajlovi (ikonice, slike)
│   ├── package.json              # 📦 Zavistnosti frontend-a
│   ├── next.config.js            # ⚙️  Konfiguracija za Next.js
│   ├── tsconfig.json             # 🛠️  TypeScript podešavanja
│
│── contracts/                    # 📌 Rust smart contract (Arbitrum Stylus)
│   ├── src/
│   │   ├── lib.rs                # 📜 Glavni pametni ugovor
│   │   ├── types.rs              # 🏗️  Strukture podataka (Testament, Heir)
│   │   ├── utils.rs              # 🛠️  Pomoćne funkcije
│   │   ├── zk_verify.rs          # 🔐 Modul za integraciju zkVerify
│   │   ├── tests.rs              # ✅ Testovi za ugovor
│   ├── Cargo.toml                # 📦 Rust zavisnosti (Stylus SDK, zkVerify)
│   ├── build.rs                  # 🏗️  Skripta za kompajliranje ugovora
│
│── circuits/                     # 📌 Circom fajlovi za zkProof
│   ├── hashers.circom            # 🔐 Heširanje podataka
│   ├── main.circom               # 📜 Glavni krug za proveru naslednika
│   ├── merkleTree.circom         # 🌳 Merkle stablo za naslednike
│   ├── nullifier.circom          # 🛡️  Generisanje jedinstvenih identiteta
│   ├── privToPub.circom          # 🔑 Konverzija privatnih u javne ključeve
│   ├── proofs/                   # 📁 Generisani dokazi (proof.json, public.json)
│       ├── proof.json
│       ├── public.json
│       ├── verification_key.json
│
│── database/                     # 📌 Baza podataka (JSON fajlovi)
│   ├── testaments/               # 📁 Svi testamenti
│   │   ├── 0x12345.json          # 📜 Testament korisnika
│   │   ├── 0x67890.json          # 📜 Drugi testament
│   ├── heirs/                    # 📁 Naslednici (njihovi podaci)
│   │   ├── 0xHeir1.json          # 📜 Podaci o nasledniku
│   │   ├── 0xHeir2.json          # 📜 Drugi naslednik
│
│── scripts/                      # 📌 Skripte za deployment & testiranje
│   ├── deploy_contract.ts        # 🚀 Deploy Rust smart contracta
│   ├── generate_testament.ts     # 🏗️  Generisanje JSON fajla za testament
│   ├── hash_testament.ts         # 🔐 Generisanje SHA-256 hash-a
│   ├── convert_json_to_pdf.ts    # 📄 Konverzija JSON-a u PDF
│   ├── generate_proof.ts         # 🔐 Generisanje ZK dokaza (koristi wasm)
│
│── .gitignore                    # 🚫 Ignorisani fajlovi u Gitu
│── README.md                     # 📜 Opis projekta
│── .env                          # 🔐 API ključevi (Metamask, zkVerify, Arbitrum RPC)
